From 46f3890630d0e2755dd3a0669892ae6fc45a8d8d Mon Sep 17 00:00:00 2001
From: Juri Lelli <juri.lelli@arm.com>
Date: Thu, 30 Apr 2015 11:53:48 +0100
Subject: [PATCH 46/58] arm64: Cpu invariant scheduler load-tracking and
 capacity support

Provides the scheduler with a cpu scaling correction factor for more
accurate load-tracking and cpu capacity handling.

The Energy Model (EM) (in fact the capacity value of the last element
of the capacity states vector of the core (MC) level sched_group_energy
structure) is used as the source for this cpu scaling factor.

The cpu capacity value depends on the micro-architecture and the
maximum frequency of the cpu.

The maximum frequency part should not be confused with the frequency
invariant scheduler load-tracking support which deals with frequency
related scaling due to DFVS functionality.

Signed-off-by: Juri Lelli <juri.lelli@arm.com>
Signed-off-by: Dietmar Eggemann <dietmar.eggemann@arm.com>
---
 arch/arm64/kernel/topology.c | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/arch/arm64/kernel/topology.c b/arch/arm64/kernel/topology.c
index 15c150d..9cae2c7 100644
--- a/arch/arm64/kernel/topology.c
+++ b/arch/arm64/kernel/topology.c
@@ -174,12 +174,17 @@ static void __init parse_cpu_capacity(struct device_node *cpu_node, int cpu)
 	}
 }
 
+static const struct sched_group_energy * const cpu_core_energy(int cpu);
+
 static void normalize_cpu_capacity(void)
 {
 	u64 capacity;
 	int cpu;
 	bool asym = false;
 
+	if (cpu_core_energy(0))
+		return;
+
 	if (!raw_capacity || cap_parsing_failed)
 		return;
 
@@ -669,6 +674,26 @@ static int cpu_coregroup_flags(void)
 	return mc_flags;
 }
 
+static void update_cpu_capacity(unsigned int cpu)
+{
+	unsigned long capacity;
+	int max_cap_idx;
+
+	if (!cpu_core_energy(cpu))
+		return;
+
+	max_cap_idx = cpu_core_energy(cpu)->nr_cap_states - 1;
+	capacity = cpu_core_energy(cpu)->cap_states[max_cap_idx].cap;
+
+	set_capacity_scale(cpu, capacity);
+
+	if (capacity < SCHED_CAPACITY_SCALE)
+		asym_cpucap = true;
+
+	pr_info("CPU%d: update cpu_capacity %lu\n",
+		cpu, arch_scale_cpu_capacity(NULL, cpu));
+}
+
 static void update_siblings_masks(unsigned int cpuid)
 {
 	struct cpu_topology *cpu_topo, *cpuid_topo = &cpu_topology[cpuid];
@@ -730,6 +755,7 @@ void store_cpu_topology(unsigned int cpuid)
 
 topology_populated:
 	update_siblings_masks(cpuid);
+	update_cpu_capacity(cpuid);
 }
 
 static void __init reset_cpu_topology(void)
-- 
2.7.4

